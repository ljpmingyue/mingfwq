!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBUG	log.h	/^	DEBUG = 1,$/;"	e	enum:mingfwq::LogLevel::Level
DateTimeFormatItem	log.cpp	/^    DateTimeFormatItem(const std::string format = "%Y-%m-%d %H:%M:%S ")$/;"	f	class:mingfwq::DateTimeFormatItem
DateTimeFormatItem	log.cpp	/^class DateTimeFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
ERROR	log.h	/^	ERROR = 4,$/;"	e	enum:mingfwq::LogLevel::Level
ElapseFormatItem	log.cpp	/^    ElapseFormatItem(const std::string& str="" ){}$/;"	f	class:mingfwq::ElapseFormatItem
ElapseFormatItem	log.cpp	/^class ElapseFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
FATAL	log.h	/^	FATAL = 5$/;"	e	enum:mingfwq::LogLevel::Level
FiberIdFormatItem	log.cpp	/^    FiberIdFormatItem(const std::string& str ){}$/;"	f	class:mingfwq::FiberIdFormatItem
FiberIdFormatItem	log.cpp	/^class FiberIdFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
FileLogAppender	log.cpp	/^    FileLogAppender::FileLogAppender(const std::string& filename)$/;"	f	class:mingfwq::FileLogAppender
FileLogAppender	log.h	/^class FileLogAppender:public LogAppender{$/;"	c	namespace:mingfwq
FilenameFormatItem	log.cpp	/^    FilenameFormatItem(const std::string& str=""){}$/;"	f	class:mingfwq::FilenameFormatItem
FilenameFormatItem	log.cpp	/^class FilenameFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
FormatItem	log.h	/^    class FormatItem{$/;"	c	class:mingfwq::LogFormatter
GetFiberId	util.cpp	/^uint32_t GetFiberId(){$/;"	f	namespace:mingfwq
GetInstance	singleton.h	/^	static T* GetInstance(){$/;"	f	class:mingfwq::Singleton
GetInstance	singleton.h	/^	static std::shared_ptr<T> GetInstance(){$/;"	f	class:mingfwq::SingletonPtr
GetThreadId	util.cpp	/^pid_t GetThreadId(){$/;"	f	namespace:mingfwq
INFO	log.h	/^	INFO = 2,$/;"	e	enum:mingfwq::LogLevel::Level
Level	log.h	/^    enum Level{$/;"	g	class:mingfwq::LogLevel
LevelFormatItem	log.cpp	/^    LevelFormatItem(const std::string& str="" ){}$/;"	f	class:mingfwq::LevelFormatItem
LevelFormatItem	log.cpp	/^class LevelFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
LineFormatItem	log.cpp	/^    LineFormatItem(const std::string& str =""){}$/;"	f	class:mingfwq::LineFormatItem
LineFormatItem	log.cpp	/^class LineFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
LogAppender	log.h	/^class LogAppender{$/;"	c	namespace:mingfwq
LogEvent	log.cpp	/^	LogEvent::LogEvent(std::shared_ptr<Logger> logger,LogLevel::Level level, const char* file ,int32_t line,uint32_t elapse, uint32_t thread_id, uint32_t fiber_id, uint64_t time)$/;"	f	class:mingfwq::LogEvent
LogEvent	log.h	/^class LogEvent{$/;"	c	namespace:mingfwq
LogEventWrap	log.cpp	/^    LogEventWrap::LogEventWrap(LogEvent::ptr e)$/;"	f	class:mingfwq::LogEventWrap
LogEventWrap	log.h	/^class LogEventWrap{$/;"	c	namespace:mingfwq
LogFormatter	log.cpp	/^    LogFormatter::LogFormatter(const std::string& pattern)$/;"	f	class:mingfwq::LogFormatter
LogFormatter	log.h	/^class LogFormatter{$/;"	c	namespace:mingfwq
LogLevel	log.h	/^class LogLevel{$/;"	c	namespace:mingfwq
Logger	log.cpp	/^    Logger::Logger(const std::string& name)$/;"	f	class:mingfwq::Logger
Logger	log.h	/^class Logger : public std::enable_shared_from_this<Logger>{$/;"	c	namespace:mingfwq
LoggerManager	log.cpp	/^	LoggerManager::LoggerManager(){$/;"	f	class:mingfwq::LoggerManager
LoggerManager	log.h	/^class LoggerManager{$/;"	c	namespace:mingfwq
LoggerMgr	log.h	/^	typedef mingfwq::Singleton<LoggerManager> LoggerMgr;$/;"	t	namespace:mingfwq
MINGFWQ_LOG_DEBUG	log.h	22;"	d
MINGFWQ_LOG_ERROR	log.h	25;"	d
MINGFWQ_LOG_FATAL	log.h	26;"	d
MINGFWQ_LOG_FMT_DEBUG	log.h	33;"	d
MINGFWQ_LOG_FMT_ERROR	log.h	36;"	d
MINGFWQ_LOG_FMT_FATAL	log.h	37;"	d
MINGFWQ_LOG_FMT_INFO	log.h	34;"	d
MINGFWQ_LOG_FMT_LEVEL	log.h	28;"	d
MINGFWQ_LOG_FMT_WARN	log.h	35;"	d
MINGFWQ_LOG_INFO	log.h	23;"	d
MINGFWQ_LOG_LEVEL	log.h	16;"	d
MINGFWQ_LOG_WARN	log.h	24;"	d
MessageFormatItem	log.cpp	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:mingfwq::MessageFormatItem
MessageFormatItem	log.cpp	/^class MessageFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
NameFormatItem	log.cpp	/^    NameFormatItem(const std::string& str="" ){}$/;"	f	class:mingfwq::NameFormatItem
NameFormatItem	log.cpp	/^class NameFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
NewLineFormatItem	log.cpp	/^    NewLineFormatItem(const std::string& str = ""){}$/;"	f	class:mingfwq::NewLineFormatItem
NewLineFormatItem	log.cpp	/^class NewLineFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
Singleton	singleton.h	/^class Singleton{$/;"	c	namespace:mingfwq
SingletonPtr	singleton.h	/^class SingletonPtr{$/;"	c	namespace:mingfwq
StdoutLogAppender	log.h	/^class StdoutLogAppender:public LogAppender{$/;"	c	namespace:mingfwq
StringFormatItem	log.cpp	/^    StringFormatItem(const std::string& str)$/;"	f	class:mingfwq::StringFormatItem
StringFormatItem	log.cpp	/^class StringFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
TabFormatItem	log.cpp	/^    TabFormatItem(const std::string& str="" ){}$/;"	f	class:mingfwq::TabFormatItem
TabFormatItem	log.cpp	/^class TabFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
ThreadIdFormatItem	log.cpp	/^    ThreadIdFormatItem(const std::string& str="" ){}$/;"	f	class:mingfwq::ThreadIdFormatItem
ThreadIdFormatItem	log.cpp	/^class ThreadIdFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:mingfwq	file:
ToString	log.cpp	/^    const char* LogLevel::ToString(LogLevel::Level level){$/;"	f	class:mingfwq::LogLevel
UNKNOW	log.h	/^        UNKNOW = 0,$/;"	e	enum:mingfwq::LogLevel::Level
WARN	log.h	/^	WARN = 3,$/;"	e	enum:mingfwq::LogLevel::Level
XX	log.cpp	18;"	d	file:
XX	log.cpp	352;"	d	file:
XX	log.cpp	365;"	d	file:
XX	log.cpp	8;"	d	file:
addAppender	log.cpp	/^    void Logger::addAppender(LogAppender::ptr appender){$/;"	f	class:mingfwq::Logger
debug	log.cpp	/^    void Logger::debug(LogEvent::ptr event){$/;"	f	class:mingfwq::Logger
delAppender	log.cpp	/^    void Logger::delAppender(LogAppender::ptr appender){$/;"	f	class:mingfwq::Logger
error	log.cpp	/^    void Logger::error(LogEvent::ptr event){$/;"	f	class:mingfwq::Logger
fatal	log.cpp	/^    void Logger::fatal(LogEvent::ptr event){$/;"	f	class:mingfwq::Logger
format	log.cpp	/^    std::string LogFormatter::format(std::shared_ptr<Logger> logger,LogLevel::Level level ,LogEvent::ptr event){$/;"	f	class:mingfwq::LogFormatter
getContect	log.h	/^    std::string getContect() const {return m_ss.str();}$/;"	f	class:mingfwq::LogEvent
getElapse	log.h	/^    uint32_t getElapse() const {return m_elapse;}$/;"	f	class:mingfwq::LogEvent
getFiberId	log.h	/^    uint32_t getFiberId() const {return m_fiberId;}$/;"	f	class:mingfwq::LogEvent
getFile	log.h	/^    const char* getFile() const {return m_file;}$/;"	f	class:mingfwq::LogEvent
getFormatter	log.h	/^    LogFormatter::ptr getFormatter () const {return m_formatter; }$/;"	f	class:mingfwq::LogAppender
getLevel	log.h	/^    LogLevel::Level getLevel()const {return m_level;}$/;"	f	class:mingfwq::LogAppender
getLevel	log.h	/^    LogLevel::Level getLevel()const {return m_level;}$/;"	f	class:mingfwq::LogEvent
getLevel	log.h	/^    LogLevel::Level getLevel()const {return m_level;}$/;"	f	class:mingfwq::Logger
getLine	log.h	/^    int32_t getLine() const {return m_line;}$/;"	f	class:mingfwq::LogEvent
getLogger	log.cpp	/^	Logger::ptr LoggerManager::getLogger(const string& name){$/;"	f	class:mingfwq::LoggerManager
getLogger	log.h	/^    std::shared_ptr<Logger> getLogger() const {return m_logger;}$/;"	f	class:mingfwq::LogEvent
getName	log.h	/^    const std::string& getName() const {return m_name;}$/;"	f	class:mingfwq::Logger
getSS	log.cpp	/^    std::stringstream& LogEventWrap::getSS(){$/;"	f	class:mingfwq::LogEventWrap
getSS	log.h	/^    std::stringstream& getSS(){return m_ss;}$/;"	f	class:mingfwq::LogEvent
getThreadId	log.h	/^    uint32_t getThreadId() const {return m_threadId;}$/;"	f	class:mingfwq::LogEvent
getTime	log.h	/^    uint64_t getTime() const {return m_time;}$/;"	f	class:mingfwq::LogEvent
info	log.cpp	/^    void Logger::info(LogEvent::ptr event){$/;"	f	class:mingfwq::Logger
init	log.cpp	/^	void LoggerManager::init(){$/;"	f	class:mingfwq::LoggerManager
init	log.cpp	/^    void LogFormatter::init(){$/;"	f	class:mingfwq::LogFormatter
log	log.cpp	/^    void FileLogAppender::log(std::shared_ptr<Logger> logger,LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:mingfwq::FileLogAppender
log	log.cpp	/^    void Logger::log(LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:mingfwq::Logger
log	log.cpp	/^    void StdoutLogAppender::log(std::shared_ptr<Logger> logger,LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:mingfwq::StdoutLogAppender
m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;    \/\/Appender集合$/;"	m	class:mingfwq::Logger
m_elapse	log.h	/^    uint32_t m_elapse = 0;	    \/\/从程序开始到现在的毫秒$/;"	m	class:mingfwq::LogEvent
m_event	log.h	/^	LogEvent::ptr m_event;$/;"	m	class:mingfwq::LogEventWrap
m_fiberId	log.h	/^    uint32_t m_fiberId = 0;	    \/\/协程ID$/;"	m	class:mingfwq::LogEvent
m_file	log.h	/^    const char* m_file = nullptr;   \/\/文件名$/;"	m	class:mingfwq::LogEvent
m_filename	log.h	/^    std::string m_filename;$/;"	m	class:mingfwq::FileLogAppender
m_filestream	log.h	/^    std::ofstream m_filestream;$/;"	m	class:mingfwq::FileLogAppender
m_format	log.cpp	/^    std::string m_format;$/;"	m	class:mingfwq::DateTimeFormatItem	file:
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:mingfwq::LogAppender
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:mingfwq::Logger
m_items	log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:mingfwq::LogFormatter
m_level	log.h	/^    LogLevel::Level m_level = LogLevel::DEBUG;$/;"	m	class:mingfwq::LogAppender
m_level	log.h	/^    LogLevel::Level m_level;	                \/\/日志等级$/;"	m	class:mingfwq::Logger
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:mingfwq::LogEvent
m_line	log.h	/^    int32_t m_line = 0;		    \/\/行号 $/;"	m	class:mingfwq::LogEvent
m_logger	log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:mingfwq::LogEvent
m_loogers	log.h	/^	std::map<std::string , Logger::ptr> m_loogers;$/;"	m	class:mingfwq::LoggerManager
m_name	log.h	/^    std::string m_name;		                    \/\/日志名称$/;"	m	class:mingfwq::Logger
m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:mingfwq::LogFormatter
m_root	log.h	/^	Logger::ptr m_root;$/;"	m	class:mingfwq::LoggerManager
m_ss	log.h	/^    std::stringstream m_ss;	    \/\/日志内容流$/;"	m	class:mingfwq::LogEvent
m_string	log.cpp	/^    std::string m_string;$/;"	m	class:mingfwq::StringFormatItem	file:
m_string	log.cpp	/^    std::string m_string;$/;"	m	class:mingfwq::TabFormatItem	file:
m_threadId	log.h	/^    uint32_t m_threadId = 0;	    \/\/线程ID$/;"	m	class:mingfwq::LogEvent
m_time	log.h	/^    uint64_t m_time;		    \/\/时间戳$/;"	m	class:mingfwq::LogEvent
mingfwq	log.cpp	/^namespace mingfwq{$/;"	n	file:
mingfwq	log.h	/^namespace mingfwq$/;"	n
mingfwq	singleton.h	/^namespace mingfwq{$/;"	n
mingfwq	util.cpp	/^namespace mingfwq{$/;"	n	file:
mingfwq	util.h	/^namespace mingfwq{$/;"	n
override	log.h	/^    void log(Logger::ptr logger,LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:mingfwq::FileLogAppender
override	log.h	/^    void log(Logger::ptr logger,LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:mingfwq::StdoutLogAppender
ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:mingfwq::LogFormatter::FormatItem
ptr	log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:mingfwq::FileLogAppender
ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:mingfwq::LogAppender
ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:mingfwq::LogEvent
ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:mingfwq::LogFormatter
ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:mingfwq::Logger
ptr	log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:mingfwq::StdoutLogAppender
reopen	log.cpp	/^    bool FileLogAppender::reopen(){$/;"	f	class:mingfwq::FileLogAppender
setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val){$/;"	f	class:mingfwq::LogAppender
setLevel	log.h	/^    void setLevel(LogLevel::Level val ) { m_level = val;}$/;"	f	class:mingfwq::LogAppender
setLevel	log.h	/^    void setLevel(LogLevel::Level val) {m_level = val; }$/;"	f	class:mingfwq::Logger
warn	log.cpp	/^    void Logger::warn(LogEvent::ptr event){$/;"	f	class:mingfwq::Logger
~FormatItem	log.h	/^        virtual ~FormatItem(){}$/;"	f	class:mingfwq::LogFormatter::FormatItem
~LogAppender	log.h	/^    virtual ~LogAppender(){}$/;"	f	class:mingfwq::LogAppender
~LogEventWrap	log.cpp	/^    LogEventWrap::~LogEventWrap(){$/;"	f	class:mingfwq::LogEventWrap
